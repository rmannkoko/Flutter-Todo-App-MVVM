// Mocks generated by Mockito 5.4.6 from annotations
// in todoapp_crud_mvvm/test/mocks_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:convert' as _i5;
import 'dart:typed_data' as _i7;

import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:todoapp_crud_mvvm/data/service/todo_create_service.dart' as _i9;
import 'package:todoapp_crud_mvvm/data/service/todo_delete_service.dart'
    as _i11;
import 'package:todoapp_crud_mvvm/data/service/todo_index_service.dart' as _i8;
import 'package:todoapp_crud_mvvm/data/service/todo_show_service.dart' as _i12;
import 'package:todoapp_crud_mvvm/data/service/todo_update_service.dart'
    as _i10;
import 'package:todoapp_crud_mvvm/data/todo_model.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamedResponse_1 extends _i1.SmartFake
    implements _i2.StreamedResponse {
  _FakeStreamedResponse_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTodoModel_2 extends _i1.SmartFake implements _i3.TodoModel {
  _FakeTodoModel_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i2.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#head, [url], {#headers: headers}),
            returnValue: _i4.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(#head, [url], {#headers: headers}),
              ),
            ),
          )
          as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#get, [url], {#headers: headers}),
            returnValue: _i4.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(#get, [url], {#headers: headers}),
              ),
            ),
          )
          as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i5.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #post,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i4.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(
                  #post,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i5.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #put,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i4.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(
                  #put,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i5.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #patch,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i4.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(
                  #patch,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i5.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #delete,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i4.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(
                  #delete,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i4.Future<_i2.Response>);

  @override
  _i4.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#read, [url], {#headers: headers}),
            returnValue: _i4.Future<String>.value(
              _i6.dummyValue<String>(
                this,
                Invocation.method(#read, [url], {#headers: headers}),
              ),
            ),
          )
          as _i4.Future<String>);

  @override
  _i4.Future<_i7.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readBytes, [url], {#headers: headers}),
            returnValue: _i4.Future<_i7.Uint8List>.value(_i7.Uint8List(0)),
          )
          as _i4.Future<_i7.Uint8List>);

  @override
  _i4.Future<_i2.StreamedResponse> send(_i2.BaseRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#send, [request]),
            returnValue: _i4.Future<_i2.StreamedResponse>.value(
              _FakeStreamedResponse_1(
                this,
                Invocation.method(#send, [request]),
              ),
            ),
          )
          as _i4.Future<_i2.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
    Invocation.method(#close, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [TodoIndexService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoIndexService extends _i1.Mock implements _i8.TodoIndexService {
  MockTodoIndexService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i3.TodoModel>> fetchTodos() =>
      (super.noSuchMethod(
            Invocation.method(#fetchTodos, []),
            returnValue: _i4.Future<List<_i3.TodoModel>>.value(
              <_i3.TodoModel>[],
            ),
          )
          as _i4.Future<List<_i3.TodoModel>>);
}

/// A class which mocks [TodoCreateService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoCreateService extends _i1.Mock implements _i9.TodoCreateService {
  MockTodoCreateService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i3.TodoModel> addTodo(_i3.TodoModel? todo) =>
      (super.noSuchMethod(
            Invocation.method(#addTodo, [todo]),
            returnValue: _i4.Future<_i3.TodoModel>.value(
              _FakeTodoModel_2(this, Invocation.method(#addTodo, [todo])),
            ),
          )
          as _i4.Future<_i3.TodoModel>);
}

/// A class which mocks [TodoUpdateService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoUpdateService extends _i1.Mock implements _i10.TodoUpdateService {
  MockTodoUpdateService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i3.TodoModel> updateTodo(_i3.TodoModel? todo) =>
      (super.noSuchMethod(
            Invocation.method(#updateTodo, [todo]),
            returnValue: _i4.Future<_i3.TodoModel>.value(
              _FakeTodoModel_2(this, Invocation.method(#updateTodo, [todo])),
            ),
          )
          as _i4.Future<_i3.TodoModel>);
}

/// A class which mocks [TodoDeleteService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoDeleteService extends _i1.Mock implements _i11.TodoDeleteService {
  MockTodoDeleteService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> deleteTodo(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTodo, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [TodoShowService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoShowService extends _i1.Mock implements _i12.TodoShowService {
  MockTodoShowService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i3.TodoModel> fetchTodo(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#fetchTodo, [id]),
            returnValue: _i4.Future<_i3.TodoModel>.value(
              _FakeTodoModel_2(this, Invocation.method(#fetchTodo, [id])),
            ),
          )
          as _i4.Future<_i3.TodoModel>);
}
